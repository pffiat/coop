
version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: coop-server # Use an image built from the specified dockerfile in the `ccop-server` directory.
      dockerfile: Dockerfile
    ports:
    - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
    - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/coop?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: coopadmin
      SPRING_DATASOURCE_PASSWORD: coopmdp
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
    - backend
    - frontend

  # Frontend Service
  app-client:
    build:
      context: coop-client # Use an image built from the specified dockerfile in the `coop-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
    - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
    - app-server
    networks:
    - frontend

  # Database Service (Mysql)
  db:
    image: mysql
    ports:
    - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: coop
      MYSQL_USER: coopadmin
      MYSQL_PASSWORD: coopmdp
      MYSQL_ROOT_PASSWORD: cooprootmdp
    volumes:
    - db-data:/var/lib/mysql
    networks:
    - backend

# docker run -d -p 3306:3306 -v /var/lib/mysql -e MYSQL_DATABASE=coop -e MYSQL_USER=coopadmin -e MYSQL_PASSWORD=coopmdp -e MYSQL_ROOT_PASSWORD=cooprootmdp mysql/mysql-server

  phpmyadmin:
    links:
    - db
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
    - '8888:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: cooprootmdp
    networks:
    - backend

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: